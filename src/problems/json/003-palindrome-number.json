{
  "id": 3,
  "title": "Palindrome Number",
  "description": "Given an integer x, return true if x is a palindrome, and false otherwise.\n\nAn integer is a palindrome when it reads the same backward as forward. For example, 121 is a palindrome while 123 is not.",
  "solution": {
    "code": "def is_palindrome(x: int) -> bool:\n    # Negative numbers are not palindromes\n    if x < 0:\n        return False\n    # Convert the integer to a string\n    s = str(x)\n    # Check if the string is the same forwards and backwards\n    return s == s[::-1]",
    "explanation": "This solution converts the integer to a string and checks if it reads the same forwards and backwards. Negative numbers are not palindromes by definition. The time complexity is O(n), where n is the number of digits in x."
  },
  "category": "Math",
  "difficulty": "Easy",
  "testCases": [
    {
      "input": { "x": 121 },
      "output": true,
      "explanation": "121 reads as 121 from left to right and right to left."
    },
    {
      "input": { "x": -121 },
      "output": false,
      "explanation": "-121 reads as 121- from left to right and right to left. Negative numbers are not palindromes."
    },
    {
      "input": { "x": 10 },
      "output": false,
      "explanation": "10 reads as 01 from right to left. Therefore, it is not a palindrome."
    },
    {
      "input": { "x": 0 },
      "output": true,
      "explanation": "0 reads as 0 from left to right and right to left."
    }
  ],
  "constraints": ["-2^{31} <= x <= 2^{31} - 1"],
  "topics": ["Math", "Two Pointers"],
  "list": "blind75"
}
